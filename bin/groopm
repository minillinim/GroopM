#!/usr/bin/env python3
###############################################################################
#                                                                             #
#    groopm                                                                   #
#                                                                             #
#    Entry point. See groopm/groopm.py for internals                          #
#                                                                             #
#    Copyright (C) Michael Imelfort                                           #
#                                                                             #
###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__author__ = "Michael Imelfort"
__copyright__ = "Copyright 2012-2020"
__credits__ = ["Michael Imelfort"]
__license__ = "GPL3"
__version__ = "2.0.0"
__maintainer__ = "Michael Imelfort"
__email__ = "michael.imelfort@gmail.com"
__status__ = "Released"
__profiling__ = False

###############################################################################

import argparse
import sys
import logging
L = logging.getLogger('groopm')

from groopm import groopm

###############################################################################
###############################################################################
###############################################################################
###############################################################################

def print_help():
    print('''\

                             ...::: GroopM :::...

                     Automagical metagenomic binning FTW!

   -------------------------------------------------------------------------
                                  version: %s
   -------------------------------------------------------------------------

    Typical workflow:

    groopm parse        -> Load the raw data and save to disk
    groopm core         -> Create core bins
    groopm refine       -> Refine these cores a little
    groopm recruit      -> Add more contigs to the cores
    groopm extract      -> Extract binned contigs or reads

    Extra features:

        Utilities:

    groopm merge        -> Merge two or more bins
    groopm split        -> Split a bin into N parts
    groopm delete       -> Delete a bin

        Printing, plotting:

    groopm explore      -> Methods for viewing bin layouts
    groopm plot         -> Plot bins
    groopm highlight    -> Highlight individual bins and apply labels
    groopm flyover      -> Create a movie of your data
    groopm print        -> Print summary statistics

        Import, export:

    groopm dump         -> Write database fields to csv

    USE: groopm OPTION -h to see detailed options
    ''' % __version__)

#    groopm import       -> Import data from csv

class CustomHelpFormatter(argparse.HelpFormatter):
    def _split_lines(self, text, width):
        return text.splitlines()

    def _get_help_string(self, action):
        h = action.help
        if '%(default)' not in action.help:
            if action.default != '' and \
               action.default != [] and \
               action.default != None \
               and action.default != False:
                if action.default is not argparse.SUPPRESS:
                    defaulting_nargs = [argparse.OPTIONAL,
                                        argparse.ZERO_OR_MORE]

                    if action.option_strings or action.nargs in defaulting_nargs:

                        if '\n' in h:
                            lines = h.splitlines()
                            lines[0] += ' (default: %(default)s)'
                            h = '\n'.join(lines)
                        else:
                            h += ' (default: %(default)s)'
        return h

    def _fill_text(self, text, width, indent):
        return ''.join([indent + line for line in text.splitlines(True)])

if __name__ == '__main__':

    #-------------------------------------------------
    # intialise the options parser
    parser = argparse.ArgumentParser(add_help=False)
    subparsers = parser.add_subparsers(help="--", dest='subparser_name')

    ##################################################
    # Typical workflow
    ##################################################

    #-------------------------------------------------
    # parse raw data and save
    sub_parser = subparsers.add_parser('parse',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        help='parse raw data and save to disk',
        description='Parse raw data and save to disk')
    sub_parser.add_argument('dbname', help="name of the database being created")
    sub_parser.add_argument('reference', help="fasta file containing bam reference sequences")
    sub_parser.add_argument('covfile', help="pre-parsed coverages from bam files")
    sub_parser.add_argument('-b', '--bins', default=None, help="bin assignments tsv file")
    sub_parser.add_argument('-t', '--threads', type=int, default=1, help="number of threads to use during BAM parsing")
    sub_parser.add_argument('-f', '--force', action="store_true", default=False, help="overwrite existing DB file without prompting")
    sub_parser.add_argument('-c', '--cutoff', type=int, default=500, help="cutoff contig size during parsing")
    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    #-------------------------------------------------
    # load saved data and make bin cores
    sub_parser = subparsers.add_parser('core',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        help='load saved data and make bin cores',
        description='Load saved data and make bin cores')
    sub_parser.add_argument('dbname', help="name of the database to open")
    sub_parser.add_argument('-w', '--window_size', type=int, default=400, help='Build models using a sliding window of this many ranked rows')
    sub_parser.add_argument('-t', '--tolerance', type=float, default=0.055, help='Specify how far we travel from the centroid by default')
    sub_parser.add_argument('-b', '--plot_bins', action="store_true", default=False, help="create plots of bins after basic refinement")
    sub_parser.add_argument('-j', '--plot_journey', action='store_true', default=False, help="create plots during core creation - MAKES MANY IMAGES!")
    sub_parser.add_argument('-l', '--limit', type=int, default=0, help='Only build this many bins 0 for build as many as possible')
    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')
    # sub_parser.add_argument('-s', '--size', type=int, default=10, help="minimum number of contigs which define a core")

    #-------------------------------------------------
    # refine bins
    sub_parser = subparsers.add_parser('refine',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        help='merge similar bins / split chimeric ones',
        description='Merge similar bins and split chimeric ones')
    sub_parser.add_argument('dbname', help="name of the database to open")
#    sub_parser.add_argument('-b', '--bids', nargs='+', type=int, default=None, help="bin ids to use (None for all)")
    sub_parser.add_argument('-a', '--auto', action="store_true", default=False, help="automatically refine bins")
    sub_parser.add_argument('-p', '--plot', action="store_true", default=False, help="create plots of bins after refinement")
    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    #-------------------------------------------------
    # enlarge bins
    sub_parser = subparsers.add_parser('recruit',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        help='load saved data and enlarge bins',
        description='Recruit more contigs into existing bins')
    sub_parser.add_argument('dbname', help="name of the database to open")
    sub_parser.add_argument('-c', '--cutoff', type=int, default=500, help="cutoff contig size")
    sub_parser.add_argument('-f', '--force', action="store_true", default=False, help="overwrite existing db file without prompting")
    sub_parser.add_argument('-s', '--step', default=200, type=int, help="step size for iterative recruitment")
    sub_parser.add_argument('-i', '--inclusivity', default=2.5, type=float, help="make recruitment more or less inclusive")
    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    #-------------------------------------------------
    # extract reads and contigs from saved
    sub_parser = subparsers.add_parser('extract',
        formatter_class=CustomHelpFormatter,
        help='extract contigs or reads based on bin affiliations',
        description='Extract contigs or reads based on bin affiliations',
        epilog='''Example usage:

 Extract contigs from bin 33:

  $ groopm extract my_db.gm my_contigs.fasta --bids 33

 Extract reads mapping to contigs in bin 35:

  $ groopm extract my_db.gm my.bam -bids 35 --mode reads

''')
    sub_parser.add_argument('dbname', help="name of the database to open")
    sub_parser.add_argument('data', nargs='+', help="data file(s) to extract from, bam or fasta")
    sub_parser.add_argument('-b', '--bids', nargs='+', type=int, default=None, help="bin ids to use (None for all)")
    sub_parser.add_argument('-m', '--mode', default="contigs", help="what to extract [reads, contigs]", choices=('contigs','reads'))
    sub_parser.add_argument('-o', '--out_folder', default="", help="write to this folder (None for current dir)")
    sub_parser.add_argument('-p', '--prefix', default="", help="prefix to apply to output files")

    contig_extraction_options=sub_parser.add_argument_group('Contig extraction options')
    contig_extraction_options.add_argument('-c', '--cutoff', type=int, default=0, help="cutoff contig size (0 for no cutoff)")

    read_extraction_options=sub_parser.add_argument_group('Read extraction options')
    read_extraction_options.add_argument('--mix_bams', action="store_true", default=False, help="use the same file for multiple bam files")
    read_extraction_options.add_argument('--mix_groups', action="store_true", default=False, help="use the same files for multiple group groups")
    read_extraction_options.add_argument('--mix_reads', action="store_true", default=False, help="use the same files for paired/unpaired reads")
    read_extraction_options.add_argument('--interleave', action="store_true", default=False, help="interleave paired reads in ouput files")
    read_extraction_options.add_argument('--headers_only', action="store_true", default=False, help="extract only (unique) headers")
    read_extraction_options.add_argument('--no_gzip', action="store_true", default=False, help="do not gzip output files")

    read_extraction_options.add_argument('--mapping_quality', type=int, default=0, help="mapping quality threshold")
    read_extraction_options.add_argument('--use_secondary', action="store_true", default=False, help="use reads marked with the secondary flag")
    read_extraction_options.add_argument('--use_supplementary', action="store_true", default=False, help="use reads marked with the supplementary flag")
    read_extraction_options.add_argument('--max_distance', type=int, default=1000, help="maximum allowable edit distance from query to reference")

    read_extraction_options.add_argument('-t', '--threads', type=int, default=1, help="maximum number of threads to use")

    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    ##################################################
    # Utilities
    ##################################################

    #-------------------------------------------------
    # combine two or more bins into one
    sub_parser = subparsers.add_parser('merge',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        help='merge 2 or more bins')
    sub_parser.add_argument('dbname', help="name of the database to open")
    sub_parser.add_argument('bids', nargs='+', type=int, help="bin ids to merge.")
    sub_parser.add_argument('-f', '--force', action="store_true", default=False, help="merge without prompting")
    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    #-------------------------------------------------
    # split a bin into two parts
    sub_parser = subparsers.add_parser('split',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        help='split a bin into n pieces')
    sub_parser.add_argument('dbname', help="name of the database to open")
    sub_parser.add_argument('bid', type=int, help="bin id to split")
    sub_parser.add_argument('parts', type=int, help="number of parts to split the bin into")
    sub_parser.add_argument('-m', '--mode', default="kmer", help="profile to split on [kmer, cov]")
    sub_parser.add_argument('-f', '--force', action="store_true", default=False, help="split without prompting")
    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    #-------------------------------------------------
    # delete bins
    sub_parser = subparsers.add_parser('delete',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        help='delete bins')
    sub_parser.add_argument('dbname', help="name of the database to open")
    sub_parser.add_argument('bids', nargs='+', type=int, help="bin ids to delete")
    sub_parser.add_argument('-f', '--force', action="store_true", default=False, help="delete without prompting")
    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    ##################################################
    # Plotting
    ##################################################

    #-------------------------------------------------
    # show parallel plots
    sub_parser = subparsers.add_parser('pplot',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        help='explore and validate bins')
    sub_parser.add_argument('dbname', help="name of the database to open")
    sub_parser.add_argument('-i', '--include_ratio', type=float, default=1.0, help="include only the top X percent of ranked contigs")
    sub_parser.add_argument('-b', '--blocks', type=int, default=1, help="break contigs into X blocks and plot as added")
    sub_parser.add_argument('-c', '--cutoff', type=int, default=1000, help="cutoff contig size")
    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    #-------------------------------------------------
    # visualise all bins
    sub_parser = subparsers.add_parser('explore',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        help='explore and validate bins')
    sub_parser.add_argument('dbname', help="name of the database to open")
    sub_parser.add_argument('-b', '--bids', nargs='+', type=int, default=None, help="bin ids to plot (None for all)")
    sub_parser.add_argument('-c', '--cutoff', type=int, default=1000, help="cutoff contig size")
    sub_parser.add_argument('-m', '--mode', default="binids", help="Exploration mode [binpoints, binids, allcontigs, unbinnedcontigs, binnedcontigs, binassignments, compare, sidebyside, together, parallel]")
    sub_parser.add_argument('-k', '--kmers', action="store_true", default=False, help="include kmers in figure [only used when mode == together]")
    sub_parser.add_argument('-p', '--points', action="store_true", default=False, help="ignore contig lengths when plotting")
    sub_parser.add_argument('-C', '--cm', default="HSV", help="set colormap [HSV, Accent, Blues, Spectral, Grayscale, Discrete, DiscretePaired]")
    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    #-------------------------------------------------
    # flyover  --- usually this is basically an easter egg. If you find it then have fun
    sub_parser = subparsers.add_parser('flyover',
      formatter_class=argparse.ArgumentDefaultsHelpFormatter,
      help='create a purdy flyover plot of the bins you made')
    sub_parser.add_argument('dbname', help="name of the database to open")
    sub_parser.add_argument('-b', '--bids', nargs='+', type=int, default=None, help="bin ids to concentrate on (None for all)")
    sub_parser.add_argument('-c', '--cutoff', type=int, default=1000, help="cutoff contig size")
    sub_parser.add_argument('-p', '--points', action="store_true", default=False, help="ignore contig lengths when plotting")
    sub_parser.add_argument('-P', '--prefix', default="file", help="prefix to append to start of output files")
    sub_parser.add_argument('-t', '--title', default="", help="title to add to output images")
    sub_parser.add_argument('-B', '--colorbar', action="store_true", default=False, help="show the colorbar")
    sub_parser.add_argument('-f', '--format', default="jpeg", help="file format output images")
    sub_parser.add_argument('--fps', type=float, default=10, help="frames per second")
    sub_parser.add_argument('--totalTime', type=float, default=120., help="how long the movie should go for (seconds)")
    sub_parser.add_argument('--firstFade', type=float, default=0.05, help="what percentage of the movie is devoted to the unbinned contigs")
    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    #-------------------------------------------------
    # plot a bin/bins
    sub_parser = subparsers.add_parser('plot',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        help='plot bins')
    sub_parser.add_argument('dbname', help="name of the database to open")
    sub_parser.add_argument('-b', '--bids', nargs='+', type=int, default=None, help="bin ids to plot (None for all)")
    sub_parser.add_argument('-t', '--tag', default="BIN", help="tag to add to output filename")
    sub_parser.add_argument('-f', '--folder', default="", help="save plots in folder")
    sub_parser.add_argument('-p', '--points', action="store_true", default=False, help="ignore contig lengths when plotting")
    sub_parser.add_argument('-C', '--cm', default="HSV", help="set colormap [HSV, Accent, Blues, Spectral, Grayscale, Discrete, DiscretePaired]")
    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    #-------------------------------------------------
    # produce fancy image for publications
    sub_parser = subparsers.add_parser('highlight',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        help='highlight specific bins')
    sub_parser.add_argument('dbname', help="name of the database to open")
    sub_parser.add_argument('-P', '--place', action="store_true", default=False, help="use this to help work out azimuth/elevation parameters")
    sub_parser.add_argument('-L', '--binlabels', default="", help="replace bin IDs with user specified labels (use 'none' to force no labels)")
    sub_parser.add_argument('-C', '--contigcolors', default="", help="specify contig colors")
    sub_parser.add_argument('-r', '--radius', action="store_true", default=False, help="draw placement radius to help with label moving")
    sub_parser.add_argument('-c', '--cutoff', type=int, default=1000, help="cutoff contig size")
    sub_parser.add_argument('-e', '--elevation', type=float, default=25.0, help="elevation in printed image")
    sub_parser.add_argument('-a', '--azimuth', type=float, default=-45.0, help="azimuth in printed image")
    sub_parser.add_argument('-f', '--file', default="gmview", help="name of image file to produce")
    sub_parser.add_argument('-t', '--filetype', default="jpg", help="Type of file to produce")
    sub_parser.add_argument('-d', '--dpi', default=300, help="Image resolution")
    sub_parser.add_argument('-s', '--show', action="store_true", default=False, help="load image in viewer only")
    sub_parser.add_argument('-p', '--points', action="store_true", default=False, help="ignore contig lengths when plotting")
    sub_parser.add_argument('-b', '--bids', nargs='+', type=int, default=None, help="bin ids to plot (None for all)")
    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    #-------------------------------------------------
    # print bin information
    sub_parser = subparsers.add_parser('print',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        help='print bin information')
    sub_parser.add_argument('dbname', help="name of the database to open")
    sub_parser.add_argument('-b', '--bids', nargs='+', type=int, default=None, help="bin ids to print (None for all)")
    sub_parser.add_argument('-o', '--outfile', default="", help="print to file not STDOUT")
    sub_parser.add_argument('-f', '--format', default='bins', help="output format [bins, contigs]")
    sub_parser.add_argument('-u', '--unbinned', action="store_true", default=False, help="print unbinned contig IDs too")
    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    ##################################################
    # Import Export
    ##################################################

    #-------------------------------------------------
    # dump data to file
    sub_parser = subparsers.add_parser('dump',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        help='write database to text file')
    sub_parser.add_argument('dbname', help="name of the database to open")
    sub_parser.add_argument('-f', '--fields', default="names,bins", help="fields to extract: Build a comma separated list from [names, mers, svds, gc, coverage, tcoverage, ncoverage, lengths, bins] or just use 'all']")
    sub_parser.add_argument('-o', '--outfile', default="GMdump.csv", help="write data to this file")
    sub_parser.add_argument('-s', '--separator', default=",", help="data separator")
    sub_parser.add_argument('--no_headers', action="store_true", default=False, help="don't add headers")
    logging_options=sub_parser.add_argument_group('Logging options')
    logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
    logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    if False:
        #-------------------------------------------------
        # import from file
        sub_parser = subparsers.add_parser('import',
            formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            help='import information from ')
        sub_parser.add_argument('infile', help="file with data to import")
        sub_parser.add_argument('-t', '--fields', default="bins", help="data type to import. [bins]")
        sub_parser.add_argument('-s', '--separator', default=",", help="data separator")
        sub_parser.add_argument('--has_headers', action="store_true", default=False, help="file contains headers")
        logging_options=sub_parser.add_argument_group('Logging options')
        logging_options.add_argument('--logfile', help='Output logs to file: Default: output to stdout', default=None)
        logging_options.add_argument('--loglevel', help='Log verbosity:', choices=['CRITICAL','ERROR','WARNING','INFO','DEBUG'], default='ERROR')

    ##################################################
    # System
    ##################################################

    #-------------------------------------------------
    # get and check options
    args = None
    if(len(sys.argv) == 1):
        print_help()
        sys.exit(0)

    def check_version(query):
        return (
            (query == '-v') or
            (query == '--v') or
            (query == '-version') or
            (query == '--version'))

    def check_help(query):
        return (
            (query == '-h') or
            (query == '--h') or
            (query == '-help') or
            (query == '--help'))

    if check_version(sys.argv[1]):
        print("GroopM: version %s %s %s" % (
            __version__,
            __copyright__,
            __author__))
        sys.exit(0)

    if check_help(sys.argv[1]):
        print_help()
        sys.exit(0)

    if(len(sys.argv) == 2):
        subparsers.choices[sys.argv[-1]].print_help()
        sys.exit(0)

    if(len(sys.argv) == 3):
        if check_help(sys.argv[-1]):
            subparsers.choices[sys.argv[1]].print_help()
            sys.exit(0)

    args = parser.parse_args()


    # create a logger
    if args.logfile is None:
        lh = logging.StreamHandler()
    else:
        lh = logging.FileHandler(args.logfile)

    L.setLevel(args.loglevel)

    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    lh.setFormatter(formatter)
    L.addHandler(lh)
    L.critical('Called with arg: %s' % ' '.join(sys.argv))

    #-------------------------------------------------
    # do what we came here to do
    try:
        GM_parser = groopm.GroopMOptionsParser(__version__)

        if(__profiling__):
            L.info('Profiling on')
            import cProfile
            import pstats
            cProfile.run('GM_parser.parseOptions(args)', 'prof')
            p = pstats.Stats('prof')
            p.sort_stats('cumulative').print_stats(10)
            p.sort_stats('time').print_stats(10)

        else:
            L.info('Profiling off')
            GM_parser.parseOptions(args)
    except:
        L.error("Unexpected error: %s" % (sys.exc_info()[0]))
        raise

###############################################################################
###############################################################################
###############################################################################
###############################################################################
